{"ast":null,"code":"var _jsxFileName = \"C:\\\\Me\\\\Projects\\\\Electronix AI - Assignment\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [text, setText] = useState('');\n  const [result, setResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handlePredict = async () => {\n    var _data$data;\n    setLoading(true);\n    const response = await fetch('http://localhost:8000/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `\n          query {\n            sentiment(text: \"${text}\") {\n              label\n              score\n            }\n          }\n        `\n      })\n    });\n    const data = await response.json();\n    setResult(((_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.sentiment) || null);\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      padding: '2rem',\n      fontFamily: 'sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Electronix AI - Sentiment Analyzer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"5\",\n      cols: \"60\",\n      placeholder: \"Type your text here...\",\n      value: text,\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePredict,\n      disabled: loading || !text,\n      children: loading ? 'Predicting...' : 'Predict'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), \" \", result.label, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 50\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Confidence:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), \" \", result.score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Tu2SjlPdxsdDW7Qh1+Anagj6Lhc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","text","setText","result","setResult","loading","setLoading","handlePredict","_data$data","response","fetch","method","headers","body","JSON","stringify","query","data","json","sentiment","className","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","cols","placeholder","value","onChange","e","target","onClick","disabled","marginTop","label","score","_c","$RefreshReg$"],"sources":["C:/Me/Projects/Electronix AI - Assignment/frontend/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [text, setText] = useState('');\r\n  const [result, setResult] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handlePredict = async () => {\r\n    setLoading(true);\r\n    const response = await fetch('http://localhost:8000/graphql', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        query: `\r\n          query {\r\n            sentiment(text: \"${text}\") {\r\n              label\r\n              score\r\n            }\r\n          }\r\n        `,\r\n      }),\r\n    });\r\n\r\n    const data = await response.json();\r\n    setResult(data.data?.sentiment || null);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\" style={{ padding: '2rem', fontFamily: 'sans-serif' }}>\r\n      <h2>Electronix AI - Sentiment Analyzer</h2>\r\n      <textarea\r\n        rows=\"5\"\r\n        cols=\"60\"\r\n        placeholder=\"Type your text here...\"\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n      <br />\r\n      <button onClick={handlePredict} disabled={loading || !text}>\r\n        {loading ? 'Predicting...' : 'Predict'}\r\n      </button>\r\n\r\n      {result && (\r\n        <div style={{ marginTop: '1rem' }}>\r\n          <strong>Label:</strong> {result.label} <br />\r\n          <strong>Confidence:</strong> {result.score}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}